**********************************************************************
*                                                                    *
*  This macro was written by Paul Edwards                            *
*  Released to the public domain                                     *
*                                                                    *
**********************************************************************
**********************************************************************
*                                                                    *
*  PDPTOP - standard code for the start of every assembler file.     *
*                                                                    *
*  (version customized for S/380 - see PDPTOP/PDPORIG for original)  *
*                                                                    *
**********************************************************************
*
* Is the GCC or IBM C calling convention being used?
*
         GBLC &COMP               Declare compiler switch
*
* What system are the compiles being done for?
*
         GBLC &ZSYS               Declare variable for system
*
* Do we want to support environments like MVS/XA needing step down?
*
         GBLC &STEPD              Declare variable for step-down
*
* Which OS are we targetting?
*
         GBLC &OS                 Declare compiler switch
*
* Are PUTs done in locate or move mode?
*
         GBLC &OUTM
*
*
*
&COMP    SETC 'GCC'               Indicate that this is for GCC
* &COMP    SETC 'IBMC'            Indicate that this is for IBM C
&ZSYS    SETC 'S380'              Define either S370, S380 or S390
&STEPD   SETC 'YES'               Indicate we want to step down
&OUTM    SETC 'M'                 Indicate move mode
* &OUTM    SETC 'L'               Indicate locate mode
&OS      SETC 'UNKNOWN'           Indicate that the OS is not known
* &OS      SETC 'MVS'             Indicate that this is for MVS
* &OS      SETC 'MUSIC'           Indicate that this is for MUSIC/SP
*
* The S/380 model (e.g. MVS/XA) is a hybrid model - the code
* can reside below the line so that it can do I/O, but it
* can address data above the line. So it can constantly
* switch between AMODEs.
*
         AMODE ANY
         RMODE ANY
*
